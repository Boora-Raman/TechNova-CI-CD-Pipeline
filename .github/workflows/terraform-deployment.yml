name: Terraform Code For ECS Deployment

on:
  push:
    branches:
      - ecs-cluster
    paths:
      - "Terraform-Deployment/**"

env:
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_REGION: ${{ secrets.AWS_REGION }}
  S3_BUCKET: technova-codedeploy-bucket
  CODEDEPLOY_APP: technova-codedeploy
  CODEDEPLOY_GROUP: techonva-deploy-group 

jobs:
  terraform-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.8.4
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      - name: Terraform Initialize
        working-directory: ./Terraform-Deployment
        run: terraform init

      - name: Terraform Code Validation
        working-directory: ./Terraform-Deployment
        run: terraform validate

      - name: Terraform Plan Status
        working-directory: ./Terraform-Deployment
        run: terraform plan

      - name: Apply Terraform Changes
        working-directory: ./Terraform-Deployment
        run: terraform apply -auto-approve

      # - name: Generate AppSpec and Upload to S3
      #   working-directory: ./Terraform-Deployment
      #   run: |
      #     TASK_ARN=$(terraform output -raw latest_task_definition_arn)
      #     echo "Task ARN from terraform: $TASK_ARN"
      #     if [ -z "$TASK_ARN" ]; then
      #       echo "Error: TASK_ARN is empty!"
      #       exit 1
      #     fi
          
      #     cat <<EOF > appspec.yaml
      #     version: 1
      #     Resources:
      #       - TargetService:
      #           Type: AWS::ECS::Service
      #           Properties:
      #             TaskDefinition: $TASK_ARN
      #             LoadBalancerInfo:
      #               ContainerName: "technova"
      #               ContainerPort: 3000
      #     EOF

      #     echo "Generated AppSpec content:"
      #     cat appspec.yaml

      #     aws s3 cp appspec.yaml s3://${S3_BUCKET}/appspec.yaml || { echo "Failed to upload AppSpec to S3"; exit 1; }

      # - name: Trigger CodeDeploy Deployment
      #   run: |
      #     aws deploy create-deployment \
      #       --application-name $CODEDEPLOY_APP \
      #       --deployment-group-name $CODEDEPLOY_GROUP \
      #       --s3-location bucket=$S3_BUCKET,bundleType=YAML,key=appspec.yaml \
      #       --description "Deploying latest task" || { echo "CodeDeploy deployment failed"; exit 1; }
